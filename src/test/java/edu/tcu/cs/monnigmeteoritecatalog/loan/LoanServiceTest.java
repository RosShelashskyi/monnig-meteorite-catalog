package edu.tcu.cs.monnigmeteoritecatalog.loan;

import edu.tcu.cs.monnigmeteoritecatalog.sample.Sample;
import edu.tcu.cs.monnigmeteoritecatalog.system.exception.ObjectNotFoundException;
import edu.tcu.cs.monnigmeteoritecatalog.utils.IdWorker;
import jakarta.inject.Inject;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;

import java.security.Timestamp;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Optional;

import static org.assertj.core.api.Assertions.assertThat;
import static org.assertj.core.api.Assertions.catchThrowable;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.mockito.BDDMockito.given;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;

@ExtendWith(MockitoExtension.class)
public class LoanServiceTest {
    @Mock
    LoanRepository loanRepository;

    @Mock
    IdWorker idWorker;

    @InjectMocks
    LoanService loanService;

    List<Loan> loans;

    @BeforeEach
    void setUp(){
        //data generated by GPT-3.5
        Sample s1 = new Sample();
        s1.setSample_ID(idWorker.nextId() + "");
        s1.setName("Abbott");
        s1.setMonnig_number("M398.1");
        s1.setCountry("USA");
        s1.setSample_class("Ordinary Chondrite");
        s1.setGroup("H");
        s1.setDate_found_year("1951");
        s1.setSample_weight_g((float)325.1);

        Sample s2 = new Sample();
        s2.setSample_ID(idWorker.nextId() + "");
        s2.setName("Abee");
        s2.setMonnig_number("M499.2");
        s2.setCountry("Canada");
        s2.setSample_class("Enstatite Chondrite");
        s2.setGroup("EH");
        s2.setDate_found_year("1952");
        s2.setSample_weight_g((float)453.1);

        Loan l1 = new Loan();
        l1.setLoanee_name("John Doe");
        l1.setLoanee_email("johndoe@example.com");
        l1.setLoanee_institution("Meteorite Research Institute");
        l1.setLoanee_address("123 Meteorite Street, Cityville, USA");
        l1.setLoan_start_date("2024-04-01 10:00:00");
        l1.setLoan_due_date("2024-04-15 10:00:00");
        l1.setLoan_notes("Fragile meteorite, handle with care.");
        l1.setSamples_on_loan(Arrays.asList(s1));

        Loan l2 = new Loan();
        l2.setLoanee_name("Jane Smith");
        l2.setLoanee_email("janesmith@example.com");
        l2.setLoanee_institution("Space Exploration Society");
        l2.setLoanee_address("456 Galaxy Avenue, Star City, Canada");
        l2.setLoan_start_date("2024-03-20 09:30:00");
        l2.setLoan_due_date("2024-04-10 09:30:00");
        l2.setLoan_notes("Rare meteorite, research project.");
        l2.setSamples_on_loan(Arrays.asList(s2));

        this.loans = new ArrayList<>();
        this.loans.add(l1);
        this.loans.add(l2);
    }

    @AfterEach
    void tearDown(){
    }

    @Test
    void testFindByIdSuccess(){
        //given
        Sample s = new Sample();
        s.setSample_ID(idWorker.nextId() + "");
        s.setName("Abbott");
        s.setMonnig_number("M398.1");
        s.setCountry("USA");
        s.setSample_class("Ordinary Chondrite");
        s.setGroup("H");
        s.setDate_found_year("1951");
        s.setSample_weight_g((float)325.1);

        Loan l = new Loan();
        l.setLoanee_name("John Doe");
        l.setLoanee_email("johndoe@example.com");
        l.setLoanee_institution("Meteorite Research Institute");
        l.setLoanee_address("123 Meteorite Street, Cityville, USA");
        l.setLoan_start_date("2024-04-01 10:00:00");
        l.setLoan_due_date("2024-04-15 10:00:00");
        l.setLoan_notes("Fragile meteorite, handle with care.");
        l.setSamples_on_loan(Arrays.asList(s));

        given(loanRepository.findById(l.getLoan_ID())).willReturn(Optional.of(l));

        //when
        Loan returnedLoan = loanService.findById(l.getLoan_ID());

        //then
        assertThat(returnedLoan.getLoan_ID()).isEqualTo(l.getLoan_ID());
        assertThat(returnedLoan.getSamples_on_loan()).isEqualTo(l.getSamples_on_loan());
        assertThat(returnedLoan.getLoanee_name()).isEqualTo(l.getLoanee_name());
        assertThat(returnedLoan.getLoanee_email()).isEqualTo(l.getLoanee_email());
        assertThat(returnedLoan.getLoanee_institution()).isEqualTo(l.getLoanee_institution());
        assertThat(returnedLoan.getLoan_start_date()).isEqualTo(l.getLoan_start_date());
        assertThat(returnedLoan.getLoan_due_date()).isEqualTo(l.getLoan_due_date());
        assertThat(returnedLoan.getLoan_notes()).isEqualTo(l.getLoan_notes());
        verify(this.loanRepository, times(1)).findById(l.getLoan_ID());

    }

    @Test
    void testFindByIdNotFound(){
        //given
        given(loanRepository.findById(Mockito.any(String.class))).willReturn(Optional.empty());

        //when
        Throwable thrown = catchThrowable(() -> {
            Loan returnedLoan = loanService.findById("1");
        });

        //then
        assertThat(thrown)
                .isInstanceOf(ObjectNotFoundException.class)
                .hasMessage("Could not find loan with Id 1");
        verify(loanRepository, times(1)).findById("1");
    }

    @Test
    void testFindAllSuccess(){
        //given
        given(loanRepository.findAll()).willReturn(this.loans);

        //when
        List<Loan> actualLoans = loanService.findAll();

        //then
        assertThat(actualLoans.size()).isEqualTo(this.loans.size());
        verify(loanRepository, times(1)).findAll();
    }

    @Test
    void testSaveSuccess(){
        //given
        Sample s = new Sample();
        s.setSample_ID(idWorker.nextId() + "");
        s.setName("Abbott");
        s.setMonnig_number("M398.1");
        s.setCountry("USA");
        s.setSample_class("Ordinary Chondrite");
        s.setGroup("H");
        s.setDate_found_year("1951");
        s.setSample_weight_g((float)325.1);

        Loan l = new Loan();
        l.setLoan_ID(idWorker.nextId() + "");
        l.setLoanee_name("John Doe");
        l.setLoanee_email("johndoe@example.com");
        l.setLoanee_institution("Meteorite Research Institute");
        l.setLoanee_address("123 Meteorite Street, Cityville, USA");
        l.setLoan_start_date("2024-04-01 10:00:00");
        l.setLoan_due_date("2024-04-15 10:00:00");
        l.setLoan_notes("Fragile meteorite, handle with care.");
        l.setSamples_on_loan(Arrays.asList(s));

        given(idWorker.nextId()).willReturn(123456L);
        given(loanRepository.save(l)).willReturn(l);

        //when
        Loan savedLoan = loanService.save(l);

        //then
        assertThat(savedLoan.getLoan_ID()).isEqualTo(l.getLoan_ID());
        assertThat(savedLoan.getSamples_on_loan()).isEqualTo(l.getSamples_on_loan());
        assertThat(savedLoan.getLoanee_name()).isEqualTo(l.getLoanee_name());
        assertThat(savedLoan.getLoanee_email()).isEqualTo(l.getLoanee_email());
        assertThat(savedLoan.getLoanee_institution()).isEqualTo(l.getLoanee_institution());
        assertThat(savedLoan.getLoanee_address()).isEqualTo(l.getLoanee_address());
        assertThat(savedLoan.getLoan_start_date()).isEqualTo(l.getLoan_start_date());
        assertThat(savedLoan.getLoan_due_date()).isEqualTo(l.getLoan_due_date());
        assertThat(savedLoan.getLoan_notes()).isEqualTo(l.getLoan_notes());
        verify(loanRepository, times(1)).save(l);
    }

    @Test
    void testUpdateSuccess(){
        //given
        Sample s1 = new Sample();
        s1.setSample_ID(idWorker.nextId() + "");
        s1.setName("Abbott");
        s1.setMonnig_number("M398.1");
        s1.setCountry("USA");
        s1.setSample_class("Ordinary Chondrite");
        s1.setGroup("H");
        s1.setDate_found_year("1951");
        s1.setSample_weight_g((float)325.1);

        Sample s2 = new Sample();
        s2.setSample_ID(idWorker.nextId() + "");
        s2.setName("Abee");
        s2.setMonnig_number("M499.2");
        s2.setCountry("Canada");
        s2.setSample_class("Enstatite Chondrite");
        s2.setGroup("EH");
        s2.setDate_found_year("1952");
        s2.setSample_weight_g((float)453.1);

        Loan oldLoan = new Loan();
        oldLoan.setLoan_ID("1");
        oldLoan.setLoanee_name("John Doe");
        oldLoan.setLoanee_email("johndoe@example.com");
        oldLoan.setLoanee_institution("Meteorite Research Institute");
        oldLoan.setLoanee_address("123 Meteorite Street, Cityville, USA");
        oldLoan.setLoan_start_date("2024-04-01 10:00:00");
        oldLoan.setLoan_due_date("2024-04-15 10:00:00");
        oldLoan.setLoan_notes("Fragile meteorite, handle with care.");
        oldLoan.setSamples_on_loan(Arrays.asList(s1));

        Loan update = new Loan();
        update.setLoanee_name("Jane Smith");
        update.setLoanee_email("janesmith@example.com");
        update.setLoanee_institution("Space Exploration Society");
        update.setLoanee_address("456 Galaxy Avenue, Star City, Canada");
        update.setLoan_start_date("2024-03-20 09:30:00");
        update.setLoan_due_date("2024-04-10 09:30:00");
        update.setLoan_notes("Rare meteorite, research project.");
        update.setSamples_on_loan(Arrays.asList(s2));

        given(loanRepository.findById("1")).willReturn(Optional.of(oldLoan));
        given(loanRepository.save(oldLoan)).willReturn(oldLoan);

        //when
        Loan updatedLoan = loanService.update("1", update);

        //then
        assertThat(updatedLoan.getLoan_ID()).isEqualTo("1");
        assertThat(updatedLoan.getLoanee_name()).isEqualTo(update.getLoanee_name());
        verify(loanRepository, times(1)).findById("1");
        verify(loanRepository, times(1)).save(oldLoan);
    }

    @Test
    void testUpdateNotFound(){
        //given
        Sample s = new Sample();
        s.setSample_ID(idWorker.nextId() + "");
        s.setName("Abbott");
        s.setMonnig_number("M398.1");
        s.setCountry("USA");
        s.setSample_class("Ordinary Chondrite");
        s.setGroup("H");
        s.setDate_found_year("1951");
        s.setSample_weight_g((float)325.1);

        Loan l = new Loan();
        l.setLoanee_name("John Doe");
        l.setLoanee_email("johndoe@example.com");
        l.setLoanee_institution("Meteorite Research Institute");
        l.setLoanee_address("123 Meteorite Street, Cityville, USA");
        l.setLoan_start_date("2024-04-01 10:00:00");
        l.setLoan_due_date("2024-04-15 10:00:00");
        l.setLoan_notes("Fragile meteorite, handle with care.");
        l.setSamples_on_loan(Arrays.asList(s));

        given(loanRepository.findById("1")).willReturn(Optional.empty());

        //when
        assertThrows(ObjectNotFoundException.class, () -> {
           loanService.update("1", l);
        });

        //then
        verify(loanRepository, times(1)).findById("1");
    }
}
